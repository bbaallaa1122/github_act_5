name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{ hashfiles('**/package-lock.json') }}
          restore-keys: deps-node-modules-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    runs-on: windows-latest
    outputs:
      file: ${{ steps.publish.outputs.file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Restore dependencies from cache
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{ hashfiles('**/package-lock.json') }}
          restore-keys: deps-node-modules-
      - name: Install dependencies (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Update file name
        id: publish
        run: |
          $file = Get-ChildItem -Path dist/assets/*.js | Select-Object -First 1
          echo "file=$($file.FullName)" >> $env:GITHUB_OUTPUT
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs:
      - test
      - build
    runs-on: windows-latest
    if: always()
    steps:
      - name: Downloading artifacts
        if: success()
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist
      - name: List dist directory
        if: success()
        run: ls dist
      - name: Output file name from build
        if: failure()
        run: echo "Build failed, no file to output."
      - name: Deploy
        run: echo "Deploying regardless of previous job outcomes..."
